This file is only meant to be used for brainstorming / processing the problem.

It is meant to be a layout of my thoughts/thinking

As well as a layout of the role based activity 


------------ ROLE BASED ACTIVITY ------------
Role Based Activity
A developer has implemented a program that reads a large list of date-time values from a file and writes to a separate file the list of unique, valid date-time values (no duplicates). A valid date-time value matches the following format (ISO 8601):

YYYY-MM-DDThh:mm:ssTZD

 

Where:
• YYYY = four-digit year
• MM = two-digit month (01 through 12)
• DD = two-digit day of month (01 through 31)
• hh = two digits of hour (00 through 23)
• mm = two digits of minute (00 through 59)
• ss = two digits of second (00 through 59)
• TZD = time zone designator (“Z” for GMT or +hh:mm or -hh:mm)

The developer was told that it was not necessary to perform semantic validation of the data-time value. In other words, the date-time value "9999-02-31T12:34:56+12:34" should be considered valid by your program even though February 31, 9999 is not a legitimate date.

Your job is to validate the output of this application.

* Guidelines and Requirements
* You need to provide data from the proposed developer’s program that has no duplicates and that has duplicates.
* The test program can be implemented in either Java, C, Python, or Go (preferably).
* The validation logic may not use high-level library functions that perform format validation or regular expression parsing. However, low-level library functions may be used.
* Use development environment (IDE, OS platform) of your choice.
* Make sure your test data includes duplicate values, using both "Z" for GMT or +hh:mm or -hh:mm formats.
* Please commit the solution to a public git repository (eg, github), and let us know the location of the repository (preferably one day prior to your scheduled interview). Also be sure to commit your test data.
* Be prepared to present your solution and walk through how you designed, implemented, and tested the program.
* You will want to discuss assumptions you made and challenges you encountered.
* A more comprehensive solution is preferred, but the focus is on how you demonstrate your understanding of the solution and defend your design and implementation decisions.

------------ BRAINSTORMING ------------
Assumptions:
    The output file of the developer application is going to be a .txt OR possibly a .csv file
        If it is a CSV File, the contents of the file could also be entirely different to what I could be expecting
        The same is true for a txt file, rather than being separated by newlines, the dates could be separated by spaces.
    Don't quite know how the Z works in the ISO-8601 format, would it be a "." after the ss? or a hypen (-)?

Challenges:
    Figuring out the ISO-8601 Format, different sources online state different things for the last part of the timezone, however, I see that it's explicitly stated above.


1. Initial thoughts are that since semantic validation of the DT Value was optional, there could be invalid date-times that could be in the unique/non-unique files.

    Had to look up the date-time formatting (ISO-8601)
    Example: 
        "9999-02-31T12:34:56+12:34" has a fixed length of n. - 12 hours and 34 minutes ahead?
        "2000-06-15T11:05:23.343Z" - Z for GMT but a different length.
        "2018-09-25T09:57:00+07:00" - Indicates that the time is 7 hours(?) ahead from my understanding
        "2022-10-15T08:33:12-6:00" - Indicates that the time is 6 hours behind from my understanding

2. Would have to validate that the day actually exists for the calendar month, or that the day exists for the year (ex: leap year / 02/29, 02/29 cannot exist in years that arent leap) 
3. Would also have to validate that the time matches. There arent 61 seconds in a minute. 
    Specified upper and lower bounds are listed above in the problem description:
        • YYYY = four-digit year
        • MM = two-digit month (01 through 12)                              1 to 12
        • DD = two-digit day of month (01 through 31)                       1 to 31 (However, not every month has 31 days)
        • hh = two digits of hour (00 through 23)                           0 to 59 
        • mm = two digits of minute (00 through 59)                         0 to 59
        • ss = two digits of second (00 through 59)                         0 to 59
        • TZD = time zone designator (“Z” for GMT or +hh:mm or -hh:mm)      Z for GMT, +hh:mm or -hh:mm as specified.

        Can easily do semantic checking of the YYYY-MM-DD portion by splitting each date and then checking from there, same applies to the times. 
4. Should I test to see if the dates can be passed to Python's datetime function?
5. Why provide a unique and nonunique data set for testing? Wouldnt the developer ensure that the output is 100% unique values?
6. Can there be instances where the output has unique values, but for some reason, two or multiple values turn out to be the same in some way?
7. Both datasets which are provided by me CAN be unique, but that doesn't mean they are also validated. Sure, all the values are unique, but what if they arent valid datetimes?